@using Signum.Entities.DynamicQuery
@using Signum.Entities.Reflection
@using Signum.Engine
@using Signum.Utilities.DataStructures
@model Context
@{ 
    Pagination pagination = (Pagination)ViewData[ViewDataKeys.Pagination];
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];

    pagination = FindOptions.ReplacePagination(queryDescription.QueryName, pagination);

    var paginate = pagination as Pagination.Paginate;

    ResultTable resultTable = (ResultTable)ViewData[ViewDataKeys.Results];


    Func<PaginationMode, int?, int?, Pagination> getPagination = (mode, elementsPerPage, pageNumber) =>
    {
        switch (mode)
        {
            case PaginationMode.All: return new Pagination.All();
            case PaginationMode.Firsts: return new Pagination.Firsts(elementsPerPage ?? 1);
            case PaginationMode.Paginate: return new Pagination.Paginate(elementsPerPage ?? 1);
            default: throw new InvalidOperationException();
        }
    };


    Func<Pagination, bool> isAllowed = pag => pag == FindOptions.ReplacePagination(queryDescription.QueryName, pag); 
}

<div class="sf-search-footer" style="display:@(((bool)ViewData[ViewDataKeys.ShowFooter])? "block": "none")">
    <div class="sf-pagination-left">
        @if (resultTable != null)
        {
            if (pagination is Pagination.All)
            {
            <span>@SearchMessage._0Results_N.NiceToString().ForGenderAndNumber(number: resultTable.TotalElements).FormatHtml(
                       new HtmlTag("span").Class("sf-pagination-strong").SetInnerText(resultTable.TotalElements.ToString()))
            </span>
                    
            }
            else if (pagination is Pagination.Firsts)
            {
                var first = (Pagination.Firsts)pagination;
                    
            <span>@SearchMessage.First0Results_N.NiceToString().ForGenderAndNumber(number: resultTable.Rows.Length).FormatHtml(
                    new HtmlTag("span").Class("sf-pagination-strong").Class(resultTable.Rows.Length == first.TopElements ? "sf-pagination-overflow" : null).SetInnerText(resultTable.Rows.Length.ToString()))
            </span>
            }
            else if (pagination is Pagination.Paginate)
            {
            <span>
                @SearchMessage._01of2Results_N.NiceToString().ForGenderAndNumber(number: resultTable.TotalElements).FormatHtml(
                        new HtmlTag("span").Class("sf-pagination-strong").SetInnerText(resultTable.StartElementIndex.ToString()),
                        new HtmlTag("span").Class("sf-pagination-strong").SetInnerText(resultTable.EndElementIndex.ToString()),
                        new HtmlTag("span").Class("sf-pagination-strong").SetInnerText(resultTable.TotalElements.ToString())
                        )
            </span>
            }
        }
    </div>

    <div class="sf-pagination-center form-inline form-xs">
        @{
            var currentMode = pagination.GetMode();
            var modes = EnumExtensions.GetValues<PaginationMode>().Where(a => isAllowed(getPagination(a, null, null))).Select(pm => new SelectListItem
            {
                Text = pm.NiceToString(),
                Value = pm.ToString(),
                Selected = currentMode == pm
            }).ToList();
        }
        @Html.SafeDropDownList(Model.Compose("sfPaginationMode"), modes, new { @class = "sf-pagination-size form-control" })

        @if (!(pagination is Pagination.All))
        {
            var currentElements = pagination.GetElementsPerPage();
            var elements = new List<int> { 5, 10, 20, 50, 100, 200 }.Where(a => isAllowed(getPagination(pagination.GetMode(), a, null))).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString(), Selected = i == currentElements }).ToList();

            @Html.SafeDropDownList(Model.Compose("sfElems"), elements, new { @class = "sf-pagination-size form-control" })
        }
    </div>

    <div class="sf-pagination-right">

        @if (resultTable != null && paginate != null)
        {
            MinMax<int> interval = new MinMax<int>(
             Math.Max(1, paginate.CurrentPage - 2),
             Math.Min(paginate.CurrentPage + 2, resultTable.TotalPages.Value));
                
            <input type="hidden" id="@(Model.Compose("sfPage"))" value="@paginate.CurrentPage" />
            <ul class="pagination">
                <li class="@((paginate.CurrentPage <= 1) ? "disabled" : null)" ><a data-page="@(paginate.CurrentPage - 1)" href="#">&laquo;</a></li>



                @if (interval.Min != 1)
                {
                    <li><a data-page="1" href="#">1</a></li>
                    if (interval.Min - 1 != 1)
                    {
                    <li class="disabled"><span>...</span></li>
                    }
                }

                @for (int i = interval.Min; i < paginate.CurrentPage; i++)
                {
                    <li><a data-page="@i" href="#">@i</a></li>  
                }

                <li class="active"><span>@paginate.CurrentPage.ToString()</span></li>

                @for (int i = paginate.CurrentPage + 1; i <= interval.Max; i++)
                {
                    <li><a data-page="@i" href="#">@i</a></li> 
                }

                @if (interval.Max != resultTable.TotalPages)
                {
                    if (interval.Max + 1 != resultTable.TotalPages)
                    {
                    <li class="disabled"><span>...</span></li> 
                    }
                    <li><a data-page="@resultTable.TotalPages" href="#">@resultTable.TotalPages</a></li> 
                }

                <li class="@(resultTable.TotalPages <= paginate.CurrentPage ? "disabled" : null)"><a class="sf-pagination-button" data-page="@(paginate.CurrentPage + 1)" href="#">&raquo;</a></li>
            </ul>
        }
    </div>
</div>
