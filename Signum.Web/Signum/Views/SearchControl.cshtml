@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Newtonsoft.Json
@model Context
@{ 
    Model.ReadOnly = false; /*SearchControls Context should never inherit Readonly property of parent context */
    FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    var entityColumn = queryDescription.Columns.SingleEx(a => a.IsEntity);
    Type entitiesType = Lite.Extract(entityColumn.Type);
    Implementations implementations = entityColumn.Implementations.Value;
    var settings = Finder.QuerySettings(findOptions.QueryName);
    findOptions.Pagination = findOptions.Pagination ?? settings.Pagination ?? FindOptions.DefaultPagination;
    ViewData[ViewDataKeys.FindOptions] = findOptions;

    var sfb = settings.SimpleFilterBuilder == null ? null :
        settings.SimpleFilterBuilder(Html, Model, queryDescription, findOptions);

    var prefix = Model.Compose("sfSearchControl");
}
<div id="@prefix" 
     class="sf-search-control SF-control-container" 
     data-prefix="@Model.Prefix" 
     data-find-url="@Finder.FindRoute(findOptions.QueryName)" 
     data-queryName="@QueryUtils.GetKey(findOptions.QueryName)" 
     >
    @if (sfb != null)
    {
        findOptions.ShowFilters = false;
        <div id="@Model.Compose("simpleFilerBuilder")" class="form-horizontal">
            @sfb.Control
        </div>
    }

    @{
        bool filtersAlwaysHidden = !findOptions.ShowHeader || !findOptions.ShowFilters && !findOptions.ShowFilterButton;
    }

    <div style="display:@(filtersAlwaysHidden ? "none" : "block")">
        @{
            ViewData[ViewDataKeys.FilterOptions] = findOptions.FilterOptions;
            ViewData[ViewDataKeys.FiltersVisible] = findOptions.ShowFilters;
            ViewData[ViewDataKeys.ShowAddColumn] = string.IsNullOrEmpty(Model.Prefix) && findOptions.AllowChangeColumns;
            Html.RenderPartial(Finder.Manager.FilterBuilderView); 
        }
    </div>




    <div class="sf-query-button-bar" style="@(findOptions.ShowHeader ? null : "display:none")">
        @if (!filtersAlwaysHidden)
        {
            <a  class="sf-query-button sf-filters-header btn btn-default @(findOptions.ShowFilters ? "active" : "")"
            onclick="@JsFunction.SFControlThen(prefix, "toggleFilters()")"
            title="@(findOptions.ShowFilters ? JavascriptMessage.hideFilters.NiceToString() : JavascriptMessage.showFilters.NiceToString())">
                <span class="glyphicon glyphicon glyphicon-filter"></span>
            </a>
        }
        <button type="button" class="sf-query-button sf-search btn btn-primary" id="@Model.Compose("qbSearch")">@SearchMessage.Search.NiceToString()</button>
        <script type="text/javascript">
            $("#@Model.Compose("qbSearch")").click(function(e){ $("#@Model.Compose("sfSearchControl")").SFControl().then(function(c){c.search();}) });
            $("#@Model.Compose("tblFilterBuilder")").keyup(function(e){ if (e.which == 13) { $("#@Model.Compose("qbSearch")").click(); } });
        </script>

        @if (findOptions.Create)
        {
            <a class="sf-query-button btn btn-default sf-line-button sf-create" id="@Model.Compose("qbSearchCreate")" title="@SearchMessage.CreateNew0_G.NiceToString().ForGenderAndNumber().FormatWith(implementations.IsByAll ? "?" : implementations.Types.CommaOr(a => a.NiceName()))" onclick="@JsFunction.SFControlThen(prefix, "create_click(event)")">
                <span class="glyphicon glyphicon-plus"></span>
            </a>
        }

        @if (findOptions.ShowContextMenu)
        {

            <div class="btn-group">
                <button class="sf-query-button sf-tm-selected btn btn-default dropdown-toggle" data-toggle="dropdown" id="@Model.Compose("btnSelected")" disabled="disabled">
                    @JavascriptMessage.Selected
                    (<span id="@Model.Compose("btnSelectedSpan")">0</span>)
                <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" id="@Model.Compose("btnSelectedDropDown")">
                    <li>Error: DropDown not initialized</li>
                </ul>
            </div>
        }

        @ButtonBarQueryHelper.GetButtonBarElementsForQuery(new QueryButtonContext
       {
           Url = Url,
           ControllerContext = this.ViewContext,
           QueryName = findOptions.QueryName,
           ManualQueryButtons = (ToolBarButton[])ViewData[ViewDataKeys.ManualToolbarButtons],
           EntityType = entitiesType,
           Prefix = Model.Prefix
       }).ToStringButton(Html)

        @if ((bool?)ViewData[ViewDataKeys.AvoidFullScreenButton] != true)
        { 
             <a id="@Model.Compose("sfFullScreen")" class="sf-query-button btn btn-default" href="#">
                <span class="glyphicon glyphicon-new-window"></span>
            </a>
        }

    </div>
    <div id="@Model.Compose("divResults")" class="sf-search-results-container table-responsive">
        <table id="@Model.Compose("tblResults")" class="sf-search-results  table table-hover  table-condensed">
            <thead>
                <tr>
                    @if (findOptions.AllowSelection)
                    {
                        <th class="sf-th-selection">
                            @Html.CheckBox(Model.Compose("cbSelectAll"), false, new { onclick = JsFunction.SFControlThen(prefix, "toggleSelectAll()") })
                        </th>
                    }
                    @if (findOptions.Navigate)
                    {
                        <th class="sf-th-entity"></th>
                    }
                    @{List<Column> columns = findOptions.MergeColumns(); }
                    @foreach (var col in columns)
                    {
                        var order = findOptions.OrderOptions.FirstOrDefault(oo => oo.Token.FullKey() == col.Name);
                        OrderType? orderType = null;
                        if (order != null)
                        {
                            orderType = order.OrderType;
                        }
                        @SearchControlHelper.Header(col, orderType)
                    }
                </tr>
            </thead>
            <tbody>
                @{ int columnsCount = columns.Count + (findOptions.Navigate ? 1 : 0) + (findOptions.AllowSelection ? 1 : 0); }
                <tr>
                    <td colspan="@columnsCount">@JavascriptMessage.searchForResults.NiceToString()</td>
                </tr>
            </tbody>
        </table>
    </div>

    @{
        ViewData[ViewDataKeys.ShowFooter] = findOptions.ShowFooter;
        ViewData[ViewDataKeys.Pagination] = findOptions.Pagination;
        @Html.Partial(Finder.Manager.PaginationSelectorView, Model)
    }
</div>
<script type="text/javascript">
    require(["@JsModule.Finder"], function(Finder) { new Finder.SearchControl($("#@Model.Compose("sfSearchControl")"),
        @(MvcHtmlString.Create(findOptions.ToJS(Model.Prefix).ToString())),
        @Html.Json(implementations.ToJsTypeInfos(isSearch : true, prefix: prefix)),
        @Html.Json(sfb == null ? null : sfb.Url)).ready();});
</script>
