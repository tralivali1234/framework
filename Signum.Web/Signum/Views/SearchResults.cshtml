@using Signum.Entities.DynamicQuery
@using Signum.Entities.Reflection
@using Signum.Engine
@model Context

@{
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    var entityColumn = queryDescription.Columns.SingleEx(a => a.IsEntity);
    Implementations implementations = entityColumn.Implementations.Value;
    bool navigable = (bool)ViewData[ViewDataKeys.Navigate] && (implementations.IsByAll ? true : implementations.Types.Any(t => Navigator.IsNavigable(t, null, isSearch: true)));
    bool allowSelection = (bool)ViewData[ViewDataKeys.AllowSelection];
    RowAttributes rowAttributes = (RowAttributes)ViewData[ViewDataKeys.RowAttributes];
    QueryRequest queryRequest = (QueryRequest)ViewData[ViewDataKeys.QueryRequest];
    ResultTable queryResult = (ResultTable)ViewData[ViewDataKeys.Results];
    Dictionary<int, CellFormatter> formatters = (Dictionary<int, CellFormatter>)ViewData[ViewDataKeys.Formatters];
    EntityFormatter entityFormatter = (EntityFormatter)ViewData[ViewDataKeys.EntityFormatter];

    int columnsCount = queryResult.Columns.Count() + (navigable ? 1 : 0) + (allowSelection ? 1 : 0);
}

@if (ViewData.ContainsKey(ViewDataKeys.MultipliedMessage))
{
    <tr class="extract">
        <td>
            <div class="sf-td-multiply alert alert-warning">
                <span class="glyphicon glyphicon-exclamation-sign"></span>
                @ViewData[ViewDataKeys.MultipliedMessage]
            </div>
        </td>
    </tr>
}

@foreach (var row in queryResult.Rows)
{
    Lite<IEntity> entityField = row.Entity;
    <tr data-entity="@(entityField?.Key() ?? "")" @(rowAttributes == null ? null : rowAttributes(Html, row))>
        @if (allowSelection)
        {
            <td style="text-align:center">@if (entityField != null)
                {
                    @Html.CheckBox(Model.Compose("rowSelection", row.Index.ToString()),
                    new
                    {
                        @class = "sf-td-selection",
                        value = entityField.Id.ToString() + "__" + Navigator.ResolveWebTypeName(entityField.EntityType) + "__" + entityField.ToString()
                    })
                }</td>
        }
        @if (navigable)
        {
            <td>@if (entityField != null)
                {
                    @((entityFormatter ?? QuerySettings.EntityFormatRules.Last(fr => fr.IsApplyable(row)).Formatter)(Html, row))
                }</td>
        }
        @foreach (var col in queryResult.Columns.Where(a => a.Column.IsVisible))
        {
            var value = row[col];
            var ft = formatters[col.Index];

            <td @ft.WriteDataAttribute(value) style="@(ft.TextAlign == null ? null : "text-align:" + ft.TextAlign)">@ft.Formatter(Html, value)</td>
        }
    </tr>
}

@if (queryResult.Rows.IsNullOrEmpty())
{
    <tr>
        <td colspan="@columnsCount">@SearchMessage.NoResultsFound.NiceToString()</td>
    </tr>
}

@{
    ViewData[ViewDataKeys.Pagination] = queryResult.Pagination;

    <tr class="extract">
        <td>
            @Html.Partial(Finder.Manager.PaginationSelectorView, Model)
        </td>
    </tr>
}
